function [ C,Ceq ] = constraint( fuel_use )
% Constraint function for our optimization problem, which takes the 
% decision variable and outputs a column vector of inequality constraints
% (c) and a column vector of equality constraints (ceq)

% Active constraints (true == on, false == off).
%tf_forcing_c   = true;  %leave this one on with current code
%tf_egrowth_c   = false;
%tf_energy0_ceq = false;

% Load supporting functions and scripts.
global_vars;               %global variables
cpath_lCO2 = legacy_CO2(); %legacy CO2 concentrations
cpath_lCH4 = legacy_CH4(); %legacy CH4 concentrations
cpath_lN2O = legacy_N2O(); %legacy N2O concentrations

%% Input constraint values:
% Input radiative forcing constraint.
load('const_vec.mat');
% Create old time vector for interpolating.
dt_old         = 0.01; %time step (years)
first_year_old = 2010; %initial year
last_year_old  = 2110; %final year
t_old          = (first_year_old : dt_old : last_year_old - dt_old)';
% Interpolate radiative forcing pathway.
forcing_c      = interp1(t_old,const_vec,t);

% Input energy growth rate constraint.
egrowth_c = 100; %percent annual change in energy consumption

% Input initial energy consumption constraint.
energy0_c = 5.5*10^11; %based on current values (units: GJ)

%% Calculate fuel use growth rate (for all fuels in

%% Calculate energy growth rate:
energy  = fuel_use * eta_vec;                %calculate energy use
energy1 = energy(1:(end-1),:);               %make first energy vector
energy2 = energy(2:end,:);                   %make second energy vector
growth  = dt*(energy1 - energy2)./(energy1); %calcualte growth rate
growth  = [growth ; 0];                      %make dimensions agree
agrowth = abs(growth);                       %calculate absolute value

%% Calculate iniital energy consumption:
energy0 = energy(1);

%% Calculate radiative forcing pathway:
% Calculate emissions from fuel use and emissions intensity
emissions = fuel_use * ems_mat; %emissions matrix 
evec_CO2  = emissions(:,1);     %extract CO2 emissions
evec_CH4  = emissions(:,2);     %extract CH4 emissions
% Calculate radiative forcing from emissions.
cvec_CO2   = e2c_CO2(evec_CO2) + cpath_lCO2; %CO2 concentration
fvec_CO2   = rf_CO2(cvec_CO2);               %CO2 radiative forcing
cvec_CH4   = e2c_CH4(evec_CH4) + cpath_lCH4; %CH4 concentration
fvec_CH4   = rf_CH4(cvec_CH4);               %CH4 radiative forcing
cvec_N2O   = cpath_lN2O;                     %N2O concentration  
fvec_N2O   = rf_N2O(cvec_N2O);               %N2O radiative forcing
fvec_other = -0.5175*ones(n,1);              %other radiative forcing
% Calculate total radiative forcing
fvec       = fvec_CO2 + fvec_CH4 + fvec_N2O + fvec_other;

%% Define constraints (c: a < alpha; ceq: b = beta):
C   = [fvec - forcing_c];
%C   = [fvec - forcing_c, agrowth - egrowth_c];
%Ceq = [];
Ceq = [energy0 - energy0_c];

end